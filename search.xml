<?xml version="1.0" encoding="utf-8"?>
<search>
  <entry>
    <title>build_mongodb </title>
    <url>/2020/08/31/build-mongodb/</url>
    <content><![CDATA[<hr>
<p>安装mongodb<br>sudo apt(yum) update #更新源<br>sudo apt(yum) upgrade #更新包<br>sudo apt install mongodb #下载mongodb<br>失败E: 软件包 mongodb-server 没有可安装候选<br>注释旧源，添加新源<br>vim /etc/apt/sources.list<br>   deb [by-hash=force] <a href="https://mirrors.tuna.tsinghua.edu.cn/deepin">https://mirrors.tuna.tsinghua.edu.cn/deepin</a> panda main contrib non-free<br>udo apt(yum) update #更新源<br>sudo apt(yum) upgrade #更新包<br>mongod #打开mongodb shell(说明成功)</p>
<p>查看状态<br>systemctl start mongodb #启动<br>systemctl status mongodb #查看<br>systemctl restart mongodb #重启</p>
<p>卸载<br>sudo systemctl stop mongodb<br>sudo apt purge mongodb<br>sudo apt autoremove</p>
<hr>
]]></content>
  </entry>
  <entry>
    <title>centos</title>
    <url>/2020/09/08/centos/</url>
    <content><![CDATA[<p>rpm命令<br>    rpm -q <packagename> 查询指定的包是否安装<br>    rpm -ql <packagename> 查询包生成的所有文件<br>    rpm -qc *.rpm 查询包配置文件<br>    rpm -q –changelog *.rpm 查询包更新信息<br>    rpm -ivh *.rpm 安装<br>    rpm -ivh –force *.rpm 强制安装<br>    rpm -ivh –nodeps –force *.rpm 忽略依赖关系<br>    rpm -ivh –replacepkgs *.rpm 覆盖、替换安装<br>    rpm -e *.rpm 卸载<br>    rpm -e –nodeps *.rpm 忽略依赖关系<br>    rpm -e –noscripts *.rpm 不执行脚本卸载<br>    rpm -Uvh *.rpm 升级<br>      -U和-F选项均可以升级一个包。旧包不存在时，<br>      -U选项会安装新包，而-F选项不安装新包<br>详情 man rpm</p>
<p>yum命令<br>    yum search <packagename> # 查询软件包<br>    yum install <packagename> # 安装程序包<br>    yum update <packagename> # 升级程序包<br>    yum remove/erase <packagename> # 卸载程序包<br>    yum clean all/<packagename> # 清理 本地/指定 缓存<br>    yum clean plugins#清楚插件缓存<br>    yum list [<packagename>]显示的程序包[支持通配符格式的查询]<br>    yum info <packagename> 查看程序包信息<br>    yum repolist all # 显示所有仓库<br>详情 yum –help</p>
]]></content>
  </entry>
  <entry>
    <title>基于halo搭建个人博客</title>
    <url>/2020/08/31/halo-blog/</url>
    <content><![CDATA[<p>##Ubuntu20.04上基于halo搭建个人博客</p>
<p>###更新apt</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="variable">$sudo</span> apt-get update</span><br></pre></td></tr></table></figure>
<p>###安装java环境</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="variable">$sudo</span> apt-get install openjdk-8-jdk</span><br></pre></td></tr></table></figure>
<p>###下载配置文件</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="variable">$https</span>://dl.halo.run/config/application-template.yaml</span><br></pre></td></tr></table></figure>
<p>###下载Halo</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="variable">$wget</span> https://halo.cary.tech/release/halo-1.3.2.jar</span><br></pre></td></tr></table></figure>
<p>###运行</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="variable">$java</span> -jar halo-1.3.2.jar</span><br></pre></td></tr></table></figure>
<p>###下载配置文件</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="variable">$sudo</span> curl -o /etc/systemd/system/halo.service --create-dirs https://dl.halo.run/config/halo.service</span><br></pre></td></tr></table></figure>
<p>###YOUR_JAR_PATH更换为自己halo安装包存放的路径</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="variable">$sudo</span> vim /etc/systemd/system/halo.service</span><br></pre></td></tr></table></figure>
<p>##centos7上基于halo搭建个人博客<br>###1.更新yum</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="variable">$sudo</span> yum update -y</span><br></pre></td></tr></table></figure>
<p>###2.安装java环境</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="variable">$sudo</span> yum install java-1.8.0-openjdk -y</span><br><span class="line"><span class="variable">$java</span> -version <span class="comment">#检测</span></span><br></pre></td></tr></table></figure>
<p>###3.下载配置文件</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="variable">$curl</span> -o ~/.halo/application.yaml --create-dirs https://dl.halo.run/config/application-template.yaml</span><br><span class="line"><span class="variable">$vim</span> ~/.halo/application.yaml <span class="comment">#配置</span></span><br></pre></td></tr></table></figure>
<p>###4.下载Halo</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="variable">$wget</span> https://halo.cary.tech/release/halo-1.3.2.jar</span><br><span class="line"><span class="variable">$java</span> -jar halo-1.3.2.jar <span class="comment">#运行</span></span><br></pre></td></tr></table></figure>
<p>###5.下载配置文件</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="variable">$sudo</span> curl -o /etc/systemd/system/halo.service --create-dirs https://dl.halo.run/config/halo.service</span><br><span class="line"><span class="variable">$sudo</span> vim /etc/systemd/system/halo.service <span class="comment">#YOUR_JAR_PATH更换为自己halo安装包存放的路径</span></span><br></pre></td></tr></table></figure>
<p>###6.运行<br>####修改service文件之后需要刷新 Systemd</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="variable">$sudo</span> systemctl daemon-reload</span><br></pre></td></tr></table></figure>
<p>####设置Halo自启</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="variable">$sudo</span> systemctl <span class="built_in">enable</span> halo</span><br></pre></td></tr></table></figure>
<p>####启动Halo</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="variable">$sudo</span> service halo start</span><br></pre></td></tr></table></figure>
<p>####重启Halo</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="variable">$sudo</span> service halo restart</span><br></pre></td></tr></table></figure>
<p>####停止Halo</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="variable">$sudo</span> service halo stop</span><br></pre></td></tr></table></figure>
<p>####查看Halo运行状态</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="variable">$sudo</span> service halo status</span><br></pre></td></tr></table></figure>
<p>###7.配置域名访问<br>####添加nginx源：</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="variable">$sudo</span> rpm -Uvh http://nginx.org/packages/centos/7/noarch/RPMS/nginx-release-centos-7-0.el7.ngx.noarch.rpm</span><br></pre></td></tr></table></figure>
<p>####安装nginx：</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="variable">$sudo</span> yum install -y nginx</span><br></pre></td></tr></table></figure>
<p>####启动nginx：</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="variable">$sudo</span> systemctl start nginx.service</span><br></pre></td></tr></table></figure>
<p>####设置开机自启nginx：</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="variable">$sudo</span> systemctl <span class="built_in">enable</span> nginx.service</span><br></pre></td></tr></table></figure>
<p>####下载下载 Halo 官方的 Nginx 配置模板：</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="variable">$curl</span> -o /etc/nginx/conf.d/halo.conf --create-dirs https://dl.halo.run/config/nginx.conf</span><br></pre></td></tr></table></figure>
<p>####配置模板：</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="variable">$vim</span> /etc/nginx/conf.d/halo.conf<span class="comment">#example.com与www.example.com需要修改为自己的域名</span></span><br></pre></td></tr></table></figure>
<p>####检查配置是否有误：</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="variable">$sudo</span> nginx -t</span><br></pre></td></tr></table></figure>
<p>####重载配置信息：</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="variable">$sudo</span> nginx -s reload</span><br></pre></td></tr></table></figure>
<p>####配置 SSL 证书<br>#####安装 certbot 以及 certbot nginx 插件</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="variable">$sudo</span> yum install certbot python2-certbot-nginx -y</span><br></pre></td></tr></table></figure>
<p>#####执行配置</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="variable">$sudo</span> certbot --nginx</span><br></pre></td></tr></table></figure>
<p>#####自动续约<br>$sudo certbot renew –dry-run</p>
<pre><code>####详情请到官方手册 https://halo.run/archives/install-quick-start.html</code></pre>
]]></content>
  </entry>
  <entry>
    <title>Hello World</title>
    <url>/2020/08/31/hello-world/</url>
    <content><![CDATA[<p>Welcome to <a href="https://hexo.io/">Hexo</a>! This is your very first post. Check <a href="https://hexo.io/docs/">documentation</a> for more info. If you get any problems when using Hexo, you can find the answer in <a href="https://hexo.io/docs/troubleshooting.html">troubleshooting</a> or you can ask me on <a href="https://github.com/hexojs/hexo/issues">GitHub</a>.</p>
<h2 id="Quick-Start"><a href="#Quick-Start" class="headerlink" title="Quick Start"></a>Quick Start</h2><h3 id="Create-a-new-post"><a href="#Create-a-new-post" class="headerlink" title="Create a new post"></a>Create a new post</h3><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">$ hexo new <span class="string">&quot;My New Post&quot;</span></span><br></pre></td></tr></table></figure>

<p>More info: <a href="https://hexo.io/docs/writing.html">Writing</a></p>
<h3 id="Run-server"><a href="#Run-server" class="headerlink" title="Run server"></a>Run server</h3><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">$ hexo server</span><br></pre></td></tr></table></figure>

<p>More info: <a href="https://hexo.io/docs/server.html">Server</a></p>
<h3 id="Generate-static-files"><a href="#Generate-static-files" class="headerlink" title="Generate static files"></a>Generate static files</h3><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">$ hexo generate</span><br></pre></td></tr></table></figure>

<p>More info: <a href="https://hexo.io/docs/generating.html">Generating</a></p>
<h3 id="Deploy-to-remote-sites"><a href="#Deploy-to-remote-sites" class="headerlink" title="Deploy to remote sites"></a>Deploy to remote sites</h3><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">$ hexo deploy</span><br></pre></td></tr></table></figure>

<p>More info: <a href="https://hexo.io/docs/one-command-deployment.html">Deployment</a></p>
]]></content>
  </entry>
  <entry>
    <title>安装系统</title>
    <url>/2020/09/05/install-os/</url>
    <content><![CDATA[<p><strong>可用电脑一台，8G左右u盘一个</strong> (^干净的)[^干净的]:没被玷污的！！！</p>
<p>###一.操作系统下载<br>官方网站选择不同版本的镜像</p>
<p>###二.下载启动盘制作工具<br>如UitraISO,banlenaEtcher等</p>
<p>###三.制作启动盘<br>1.打开UltraISO<br>2.继续试用<br>3.文件-&gt;打开-&gt;选择镜像文件-&gt;打开-&gt;启动-&gt;写入硬盘映象-&gt;写入<br><strong>注意：硬盘驱动器选择u盘</strong></p>
<p>###四.安装操作系统<br>1.插上u盘<br>2.进入BIOS（不同电脑不一样，自己百度，华硕主板F2）<br>3.选择启动项，把u盘拖到第一个<br>4.保存退出（F7）<br>5.接下来就是鼠标操作，识字就行</p>
<p><strong><em>小白到此结束（操作系统自动安装驱动程序）!!!</em></strong></p>
<p>###五.手动安装驱动程序<br>1主板的驱动程序<br>华硕：<a href="https://www.asus.com.cn/support/Download-Center/">https://www.asus.com.cn/support/Download-Center/</a></p>
<p>2独显的驱动程序<br>N卡：<a href="https://www.nvidia.cn/Download/index.aspx?lang=cn">https://www.nvidia.cn/Download/index.aspx?lang=cn</a><br>A卡：<a href="https://www.amd.com/zh-hans/support">https://www.amd.com/zh-hans/support</a></p>
<p>3其他设备驱动程序<br>自己查找</p>
]]></content>
  </entry>
  <entry>
    <title>基于hexo搭建个人博客</title>
    <url>/2020/08/31/hexo-blog/</url>
    <content><![CDATA[<p>#deepin v20:<br>1.安装Git:<br>    sudo apt-get install git<br>    git –version</p>
<p>2.NVM安装 Node.js 和 npm:<br>    下载并安装nvm<br>    curl -o- <a href="https://raw.githubusercontent.com/nvm-sh/nvm/v0.35.3/install.sh">https://raw.githubusercontent.com/nvm-sh/nvm/v0.35.3/install.sh</a> | bash<br>    nvm list-remote #获取一系列nodejs版本<br>    nvm install node #安装node #node -v #npm -v<br>    npm install -g cnpm -registry=<a href="https://registry.npm.taobao.org/">https://registry.npm.taobao.org</a></p>
<p>3.安装hexo<br>    cnpm install -g hexo-cli #hexo -v<br>    npm ERR! Error: EACCES: permission denied, access ‘/usr/local/lib/node_modules问题<br>       1.sudo chmod 775 /usr/local/lib/node_modules<br>       2.sudo chown -R $USER /usr/local/lib/node_modules #推荐，改变目录拥有者<br>    apt –purge remove hexo #卸载hexo</p>
<p>4.初始化hexo<br>    hexo init myblog<br>    cd myblog //进入这个myblog文件夹<br>    cnpm install</p>
<p>5.0<br>    注册coding，gitee，github等用户</p>
<p>5-1.coding托管(国内的平台，网站是中文)<br>    创建项目<br>    选择devops<br>    创建代码仓库<br>    选git，启用启用README.cd文件初始化项目<br>    su<br>    git config –global user.name “your_git_name”<br>    git config –global user.email “your_git_email”<br>    git config user.name #检查<br>    git config user.email #检查<br>    ssh-keygen -t rsa -C “your_git_email” #创建SSH<br>    cat ~/.ssh/id_rsa.pub 添加到 github的ssh key #放置公钥<br>    sudo vi .ssh/config<br>        Host git.coding.com<br>        User your_email<br>        Hostname ssh.git.coding.com<br>        PreferredAuthentications publickey<br>        IdentityFile ~/.ssh/id_rsa<br>        Port 443<br>    ssh -T <a href="mailto:&#x67;&#x69;&#x74;&#64;&#x67;&#105;&#116;&#46;&#99;&#111;&#x64;&#x69;&#x6e;&#x67;&#x2e;&#x63;&#x6f;&#109;">&#x67;&#x69;&#x74;&#64;&#x67;&#105;&#116;&#46;&#99;&#111;&#x64;&#x69;&#x6e;&#x67;&#x2e;&#x63;&#x6f;&#109;</a>  #查看是否成功<br>    vi _config.yml #配置文件<br>                /deploy:<br>                   type:git<br>                   repo:仓库地址<br>                   branch:master<br>    cnpm install –save hexo-deployer-git #安装上传插件<br>    hexo g -d<br>    静态网页，立即发布，(复制地址)</p>
<p>5-2.GitHub托管(国外网站，是英文)<br>    创建一个仓库<br>        仓库名：用户名.github.io(别为为什么)<br>    选public，勾README<br>    su<br>    git config –global user.name “your_git_name”<br>    git config –global user.email “your_git_email”<br>    git config user.name #检查<br>    git config user.email #检查<br>    ssh-keygen -t rsa -C “your_git_email” #创建SSH<br>    cat ~/.ssh/id_rsa.pub 添加到 github的ssh key #放置公钥<br>    ssh -T <a href="mailto:&#x67;&#105;&#x74;&#x40;&#x67;&#x69;&#116;&#104;&#x75;&#x62;&#x2e;&#99;&#x6f;&#x6d;">&#x67;&#105;&#x74;&#x40;&#x67;&#x69;&#116;&#104;&#x75;&#x62;&#x2e;&#99;&#x6f;&#x6d;</a>  #查看是否成功<br>    失败ssh: connect to host github.com port 22: Connection refused<br>        方法一，添加以下内容<br>        sudo vi .ssh/config<br>        Host github.com<br>        User <a href="mailto:&#x31;&#50;&#x33;&#x34;&#53;&#x40;&#113;&#113;&#46;&#x63;&#111;&#x6d;">&#x31;&#50;&#x33;&#x34;&#53;&#x40;&#113;&#113;&#46;&#x63;&#111;&#x6d;</a><br>        Hostname ssh.github.com<br>        PreferredAuthentications publickey<br>        IdentityFile ~/.ssh/id_rsa<br>        Port 443<br>        方法二，加一步ssh-add<br>        cd ~<br>        ssh-add<br>        ssh -T <a href="mailto:&#103;&#x69;&#x74;&#x40;&#103;&#105;&#x74;&#104;&#x75;&#98;&#46;&#99;&#x6f;&#x6d;">&#103;&#x69;&#x74;&#x40;&#103;&#105;&#x74;&#104;&#x75;&#98;&#46;&#99;&#x6f;&#x6d;</a>  #查看是否成功<br>    vi _config.yml #配置文件<br>                /deploy:<br>                   type:git<br>                   repo:仓库地址(点击Use SSH)<br>                   branch:master<br>    cnpm install –save hexo-deployer-git #安装上传插件<br>    hexo g -d<br>    打开项目，点Settings，找到Github pages，选择maser branch<br>    得到你的网址</p>
<p>6.发布文章<br>    hexo n “我的第一篇文章” #创建<br>    vim /home/../soure/_posts/我的第一篇文章.md #编辑<br>    cd /home/../myblog<br>    hexo clean  清理<br>    hexo g      生成<br>    hexo d      部署<br>    hexo s      启动</p>
]]></content>
  </entry>
  <entry>
    <title>Linux</title>
    <url>/2020/09/08/linux/</url>
    <content><![CDATA[<p>Linux的发行版大体分两大类，商业公司维护的发行版Redhat(RHEL)为代表，社区组织维护的发行版Debian<br>Redhat系列的包管理方式采用的是基于RPM包的YUM包管理方式<br>Debian系列是apt-get/dpkg包管理方式</p>
<p>1、你重置过你的服务器后，Host key verification failed.解决<br>    linux ssh-keygen -R 你要访问的IP地址<br>    win 删除~/.ssh/known_hosts内IP记录</p>
<p>2、Package has no installation candidate的问题<br>    sudo yum/apt-get update</p>
<p>3、xxx is not in the sudoers file.This incident will be reported.的解决方法<br>    su root<br>    chmod u+w /etc/sudoers<br>    vi /etc/sudoers<br>    复制 root ALL(ALL:ALL) ALL<br>    粘贴 root改为xxx</p>
<p>4、用户<br>    创建用户<br>    adduser xxx<br>    sudo useradd -d /home/uftp -s /bin/bash xxx  #/etc/group记录<br>    sudo passwd xxx   #/etc/shadow记录<br>     UID：/etc/passwd<br>        0 系统管理员(统管理员不见得只有root喔)<br>             1<del>499 系统账号(100</del>499 若用户有系统账号需求时，可以使用)<br>             后为  普通账号<br>     Shell：通常/bin/bash；/sbin/nologin，用来制作纯pop邮件账号者的数据</p>
<p>5、文件<br>    权限<br>    基本权限: rwxrwxrwx, 421421421<br>    chgrp<br>    chown [-R] user:grap<br>    chmod [-R] 777 :</p>
<pre><code>隐藏属性: a,i
chattr [+-=][ASacdistu]:设定
a: 档案将只能增加数据，而不能删除也不能修改数据，只有root可设定
c: 自动将此档案压缩，读取时候自动解压缩
i: 档案不能被删除、改名、设定连结也无法写入资料，只有root能设定
s: 档案被删除，他将会被完全移除出这个硬盘,如果误删了，完全无法救回
u: 与s相反，可以用来救援该档案
lsattr [-adR]: 查看

特殊权限：sxt，421(S,T代表x为空)
SUID: s 执行者将具有该程序拥有者的权限(例如passwd); 对程序有效
SGID: x 执行者在执行过程中将会获得该程序群组的支持; 对档案,目录有效
SBIT: t 用户在该目录下建立档案或目录时，仅自己与root有权力删除该档案;对目录有效

预设权限: -rw-rw-rw-, 666; drwxrwxrwx, 777
umask 022/[-S]: 预设(644)(755)/查看
创建
vi file_name
touch file_name
编辑
vi file_name
查看
cat，tac
more，less
head，tail
删除
rm file_name
移动
mv f_n1 f_n2
查找
file f_n
which [-a] command
whereis [bmsu] f_m
locate [-ir] keyword
find [PATH] [option] [action]
链接</code></pre>
<p>6、磁盘<br>    查看<br>    分割<br>    格式化<br>    检验<br>    挂载<br>    卸载</p>
<p>7、下载安装<br>    wget URL<br>    curl URL<br>    sudo bash filename</p>
<p>8、进程管理<br>    ps查看进程<br>    ps -ef<br>    ps -aux<br>    杀死进程（kill）的N种方法<br>    ps -ef | grep firefox<br>    pidof firefox-bin<br>    kill -s pid</p>
<pre><code>ps -ef | grep firefox | grep -v grep | cut -c 9-15 | xargs kill -s 9
pgrep firefox | xargs kill -s 9
pkill -9 firefox
killall -9 firefox</code></pre>
]]></content>
  </entry>
  <entry>
    <title>mongodb</title>
    <url>/2020/11/08/mongodb/</url>
    <content><![CDATA[<h3>数据库</h3>

<p><strong>连接</strong><br><code>mongo --host=127.0.0.1 --prost=27017</code></p>
<p><strong>克隆数据库</strong><br><code>db.clonedatabase(&quot;127.0.0.1&quot;)</code></p>
<p><strong>复制指定主机指定数据库到某数据库</strong><br><code>db.copyDatabase(&#39;mydb&#39;,&#39;temp&#39;,&#39;127.0.0.1&#39;)</code></p>
<p><strong>查看所有数据库</strong><br><code>show dbs</code><br><code>show databases</code></p>
<p><strong>查看当前数据库</strong><br><code>db</code><br><code>db.getname</code></p>
<p><strong>显示当前db状态</strong><br><code>db.stats()</code></p>
<p><strong>查看当前db连接的服务器地址</strong><br><code>db.getmongo()</code></p>
<p><strong>选择，隐式创建数据库</strong><br><code>use db_name</code></p>
<p><strong>删除数据库</strong><br><code>db.dropDatabase()</code></p>
<p><strong>恢复数据库</strong><br><code>db.repairDatabase()</code></p>
<p><strong>设置记录profiling (0=off,1=slow,2=all)</strong><br><code>db.setProfilingLevel(1)</code></p>
<p><strong>查看profiling</strong><br><code>show profile</code></p>
<p><strong>拷贝数据库</strong><br><code>db.copyDatabase(&#39;mail_addr&#39;,&#39;mail_addr_tmp&#39;)</code></p>
<h3>用户</h3>

<p><strong>添加或修改用户密码</strong><br><code>db.addUser(&quot;xxx&quot;,&#39;pwd&#39;)</code><br><code>db.createUser(&#123;&quot;user&quot;:&quot;账号&quot;,&quot;pwd&quot;:&quot;密码&quot;,&quot;roles&quot;:[&#123;role:&quot;角色&quot;,db:&quot;所属数据库&quot;&#125;]&#125;)</code></p>
<p><strong>查看用户列表</strong><br><code>db.system.users.find()</code></p>
<p><strong>查看所有用户</strong><br><code>show users</code></p>
<p><strong>用户认证</strong><br><code>db.auth(&quot;xxx&quot;,&#39;pwd&#39;)</code></p>
<p><strong>删除用户</strong><br><code>db.removeUser(&quot;xxx&quot;)</code></p>
<h3>集合</h3>

<p><strong>创建</strong><br><code>db.creatcollection(&#39;collection_name&#39;)</code><br><code>db.collection_name.insert([&#123;&#125;,&#123;&#125;,...])</code></p>
<p><strong>查看</strong><br><code>show collections</code><br><code>show tables</code></p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">db.collection_name.dataSize() 数据空间大小</span><br><span class="line">db.collection_name.count() 文档数目</span><br></pre></td></tr></table></figure>

<p><strong>删除</strong><br><code>db.collection_name.drop()</code></p>
<p><strong>改名</strong><br><code>db.collection_name.renamecollection(&#39;new_name&#39;)</code></p>
<p><strong>创建索引</strong><br><code>db.collection_name.ensureIndex(&#123;k:v&#125;/&#123;k:1&#125;)</code></p>
<p><strong>删除索引</strong><br><code>db.collection_name.dropIndex([&#123;k:v&#125;])</code></p>
<p><strong>查看集合索引</strong><br><code>db.collection_name.getIndexes()</code></p>
<h3>文档</h3>

<p><strong>增</strong><br><code>db.collection_name.insert()</code><br><code>db.collection_name.save()</code></p>
<p><strong>删</strong><br><code>db.collection_name.remove(&#123;条件&#125;,是否删除一条)</code></p>
<p><strong>改</strong><br><code>db.collection_name.update(&#123;条件&#125;,&#123;操作符:&#123;更新字段&#125;&#125;,&#123;upsert:ture,multi:ture&#125;)</code><br><code>db.collection_name.updatemany(&#123;条件&#125;,&#123;操作符:&#123;更新字段&#125;&#125;, false, ture)</code><br>$inc:递归该字段值<br>$set:设置字段值<br>$unset:删除字段<br>$rename:重命名字段<br>$push:增加一个对象到数组尾部<br>$pushAll:增加多个对象到数组尾部<br>$pop:从数组尾部删除一个对象<br>$pull:如果匹配指定的值，删除对应对象<br>$pullAll:如果匹配任一值，删除对应对象<br>$addToSet:如果不存在就增加一个值到数组</p>
<p><strong>查</strong><br><code>db.collection_name.find(&#123;条件字段,不能为空,&#123;&#125;&#125;,&#123;投影字段:0/1/-1&#125;)[.skip(n)/.count()/.sort(&#123;属性:1/-1&#125;)/.limit(n)]</code><br><code>db.collection_name.distinct(属性) 某属性的全集</code><br><code>db.collection_name.group(&#123;key:&#123;条件&#125;,initial:&#123;&#39;输出变量&#39;:0&#125;,reduce:fuction ()&#123;&#125;&#125;) 分组</code><br><code>db.collection_name.aggregate([&#123;管道:&#123;表达式&#125;&#125;,...]) 聚合</code><br>常用管道<br>$group 文档分组 似group by<br>{$group:{_id:”$属性”/null,rs:{$sum:”$属性”}}}<br>{$group:{_id:null,total_num:{$sum:1},total_avt:{$avg:”$avg”}}}<br>$match 数据过滤 似where<br>{$match:{属性:值}}<br>$project 投影 似as<br>$sort 聚合数据排序 似order by<br>{$group:{_id:”$属性”/null,rs:{$sum:”$属性”}},$sort:{rs:1}}<br>$skip 跳过文档数 类似skip<br>$limit 返回文档数 类似limit<br>$lookup 左外连接 似left out join<br>$unwind 将列表展开<br>{$unwind:’$score’}<br>常用表达式<br>$sum 总和 $sum:1同count表示统计<br>$avg 平均<br>$min 最小值<br>$max 最大值<br>$map<br>$reduce<br>$eq 等于<br>常用操作符<br>$lt小于<br>{‘age’: {‘$lt’: 20}}<br>$gt大于<br>{‘age’: {‘$gt’: 20}}<br>$lte小于等于<br>{‘age’: {‘$lte’: 20}}<br>$gte大于等于<br>{‘age’: {‘$gte’: 20}}<br>$ne不等于<br>{‘age’: {‘$ne’: 20}}<br>$in在范围内<br>{‘age’: {‘$in’: [20, 23]}}<br>$nin不在范围内<br>{‘age’: {‘$nin’: [20, 23]}}<br>$regex匹配正则表达式<br>{‘name’: {‘$regex’: ‘^M.*’}}name以M开头<br>$exists属性是否存在<br>{‘name’: {‘$exists’: True}}name属性存在<br>$type类型判断<br>{‘age’: {‘$type’: ‘int’}}age的类型为int<br>$mod数字模操作<br>{‘age’: {‘$mod’: [5, 0]}}年龄模5余0<br>$text文本查询<br>{‘$text’: {‘$search’: ‘Mike’}}text类型的属性中包含Mike字符串<br>$where高级条件查询<br>{‘$where’: ‘obj.fans_count == obj.follows_count’}自身粉丝数等于关注数<br>$or<br>{$or:[{条件1},…]}<br>$and<br>{$and:[{条件1},…]}</p>
<hr>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> pymongo</span><br><span class="line"></span><br><span class="line">client = pymongo.MongoClient(host=<span class="string">&#x27;127.0.0.1&#x27;</span>)</span><br><span class="line">client = MongoClient(<span class="string">&#x27;mongodb://用户名:密码@localhost:27017/数据库名&#x27;</span>)</span><br><span class="line"></span><br><span class="line">db_list = client.list_database_names()</span><br><span class="line">print(db_list)</span><br><span class="line"></span><br><span class="line">db = client.test1</span><br><span class="line">db = client[<span class="string">&#x27;test1&#x27;</span>]</span><br><span class="line">print(db)</span><br><span class="line"></span><br><span class="line">ct = db.c3</span><br><span class="line">collection = db[<span class="string">&#x27;c3&#x27;</span>]</span><br><span class="line"></span><br><span class="line">person = &#123;</span><br><span class="line">     <span class="string">&#x27;name&#x27;</span>: <span class="string">&quot;c&quot;</span>,</span><br><span class="line">     <span class="string">&#x27;age&#x27;</span>: <span class="string">&#x27;2&#x27;</span>,</span><br><span class="line">     <span class="string">&#x27;title&#x27;</span>: <span class="string">&#x27;very good!!!&#x27;</span>,</span><br><span class="line">     <span class="string">&#x27;hiredate&#x27;</span>: datetime.datetime.now()</span><br><span class="line">&#125;</span><br><span class="line">ct.insert_one(person)</span><br><span class="line">result = ct.insert([p1, p2])</span><br><span class="line">result = ct.insert_many([p1, p2])</span><br><span class="line">ct.update_one(&#123;<span class="string">&#x27;age&#x27;</span>:<span class="number">2</span>&#125;,&#123;<span class="string">&#x27;$set&#x27;</span>: &#123;<span class="string">&#x27;age&#x27;</span>: <span class="number">2</span>&#125;&#125;)</span><br><span class="line">ct.update_many()</span><br><span class="line">ct.drop</span><br><span class="line">ct.remove(&#123;<span class="string">&quot;_id&quot;</span>: <span class="string">&quot;5f618b03d43f336dbe0935f3&quot;</span>&#125;)</span><br><span class="line"></span><br><span class="line">result = ct.find(&#123;&#125;, &#123;<span class="string">&#x27;_id&#x27;</span>:<span class="number">0</span>&#125;)</span><br><span class="line">results = collection.find(&#123;<span class="string">&#x27;name&#x27;</span>:<span class="string">&#x27;python&#x27;</span>&#125;)</span><br><span class="line"><span class="keyword">for</span> result <span class="keyword">in</span> results:</span><br><span class="line"><span class="keyword">for</span> i <span class="keyword">in</span> result:</span><br><span class="line">    print(i.get(<span class="string">&#x27;age&#x27;</span>))</span><br><span class="line">    <span class="comment"># print(i[&#x27;age&#x27;])</span></span><br><span class="line"></span><br><span class="line">results = collection.find(&#123;<span class="string">&#x27;age&#x27;</span>:&#123;<span class="string">&#x27;$gt&#x27;</span>:<span class="number">20</span>&#125;&#125;)<span class="comment">#条件查询</span></span><br><span class="line">s = ct.find(&#123;<span class="string">&#x27;age&#x27;</span>: &#123;<span class="string">&#x27;$gt&#x27;</span>: <span class="number">20</span>&#125;&#125;.sort(<span class="string">&#x27;age&#x27;</span>, <span class="number">-1</span>))</span><br></pre></td></tr></table></figure>]]></content>
  </entry>
  <entry>
    <title>mssql</title>
    <url>/2020/11/08/mssql/</url>
    <content><![CDATA[<p><strong>创建数据库</strong><br>create database zb_m;</p>
<p><strong>选择数据库</strong><br>use zb_m;</p>
<p><strong>创建表</strong><br>create table student<br>(<br>    id char(10),<br>    name char(10),<br>    sex char(5) check(‘男’,’女’),<br>    check(sex=”男” and name notlike ‘ms.%’)<br>);</p>
<p>create table people<br>(<br>    bit_col BIT,          /<em>0, 1 或 NULL</em>/<br>    bigint_col bigint,    /<em>-2^63 至 2^63 -1</em>/</p>
<pre><code>int_col INT,          /*-2^31 至 2^31 -1*/

smallint_col SMALLINT,/*-2^15 至 2^15 -1*/

    tinyint_col tinyint,  /*0 至 255*/

dec_col DEC(4, 2),    /*同NUMERIC(p,s)，p是指有效位数(精度范围为1到38)，s是小数位数(刻度范围从0到p)*/

val1 CHAR(3),         /*非Unicode字符串，最多可存储8000个字符，1个字节来存储一个字符*/

val2 NCHAR(1) NOT NULL,/*固定长度的Unicode字符串，最多可存储4000个字符，2个字节来存储一个字符*/

val3 VARCHAR NOT NULL, /*可变长度的非Unicode字符串*/

val4 NVARCHAR NOT NULL,/*可变长度的Unicode字符串数据*/

created_at DATETIME2,  /*日期和时间数据*/
valid_from DATE NOT NULL,/*日期数据类型*/
start_at TIME (0) NOT NULL/*时间数据类型*/</code></pre>
<p>);</p>
<p>ALTER TABLE people</p>
<p>ALTER COLUMN val3 VARCHAR (10) NOT NULL;</p>
<p>ALTER TABLE people<br>ALTER COLUMN val4 NVARCHAR (10) NOT NULL;</p>
<p><strong>将created_at列的默认值设置为当前日期和时间</strong><br>ALTER TABLE people<br>ADD CONSTRAINT df_current_time<br>DEFAULT CURRENT_TIMESTAMP FOR created_at;</p>
<p>insert into people values<br>(<br>    1,<br>    -99,<br>    99,<br>    -10,<br>    254,<br>    20.01,<br>    ‘zb’,<br>    N’马’,<br>    ‘kdfk’,<br>    N’易百教程网’,<br>    ‘2020-06-23 09:36:37’,/<em>GETDATE()函数类似于其他数据库系统(如MySQL)中的NOW()函数</em>/<br>    ‘2020-01-01’,<br>    ‘10:10:00’<br>);</p>
<p><strong>插入数据</strong><br>insert into student(id, name,sex) values<br>(‘123’,’zb_m’,’man’),<br>(‘456’,’xb’,’man’),<br>(‘234’,’sb’,’woman’);</p>
<p><strong>查询数据</strong><br>select * from student [limit 0,2];</p>
<p><strong>条件查询</strong><br>select name from student where id &lt; ‘345’;</p>
<p><strong>创建标识列</strong><br>identity(10,2);<br><strong>第一条记录标识列的值是：10，第二条记录标识列的值是：12，第三条记录标识列的值为：14，依此类推。</strong></p>
<p><strong>创建指定列（索引）</strong><br>alter table student add ip char;</p>
<p><strong>修改列的类型，大小，约束</strong><br>ALTER TABLE student<br>ALTER COLUMN id int;</p>
<p><strong>删除指定列（索引）</strong><br>alter table student drop column id;</p>
<p><strong>添加指定列</strong><br>update student set id=123;</p>
<p><strong>删除指定行（元组）</strong><br>delete from student where id in (234,123);</p>
<p><strong>清除数据</strong><br>delete from student;<br>TRUNCATE TABLE student;</p>
<p><strong>重命名表</strong><br>exec sp_rename ‘student’,’people’;</p>
<p><strong>删除表</strong><br>drop table *;</p>
]]></content>
  </entry>
  <entry>
    <title>python</title>
    <url>/2020/11/08/python/</url>
    <content><![CDATA[<h2>Windows</h2>
    pyinstaller:
    `pyinstaller -Fw *.py`

<p>pip:<br>    <code>pip [un]install dkp[==版本] [-i https://pypi.tuna.tsinghua.edu.cn/simple/]</code><br>        阿里云 <a href="http://mirrors.aliyun.com/pypi/simple/">http://mirrors.aliyun.com/pypi/simple/</a><br>        中国科技大学 <a href="https://pypi.mirrors.ustc.edu.cn/simple/">https://pypi.mirrors.ustc.edu.cn/simple/</a><br>        豆瓣(douban) <a href="http://pypi.douban.com/simple/">http://pypi.douban.com/simple/</a><br>        清华大学 <a href="https://pypi.tuna.tsinghua.edu.cn/simple/">https://pypi.tuna.tsinghua.edu.cn/simple/</a><br>        中国科学技术大学 <a href="http://pypi.mirrors.ustc.edu.cn/simple/">http://pypi.mirrors.ustc.edu.cn/simple/</a></p>
<p>创建一个ll_env虚拟环境<br><code>virtualenv ll_env</code></p>
<p>进入到虚拟环境<br><code>ll_env\Scripts\activate</code></p>
<p>pip安装django<br><code>pip install django</code></p>
<p>基于python创建django项目<br><code>django-admin.exe startproject learning_log</code></p>
]]></content>
  </entry>
  <entry>
    <title>redis</title>
    <url>/2020/11/08/redis/</url>
    <content><![CDATA[<h3>通用</h3>

<p><strong>启动Redis</strong></p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">redis-server [--port 6379]</span><br></pre></td></tr></table></figure>

<p><strong>连接Redis</strong></p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">redis-cli [-h host -p port -a passwd db n] [--raw]</span><br></pre></td></tr></table></figure>

<p><strong>停止Redis</strong></p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">redis-cli shutdown</span><br></pre></td></tr></table></figure>

<p><strong>测试连通性</strong></p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">ping</span><br></pre></td></tr></table></figure>

<p><strong>选择数据库</strong></p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">select 0-15</span><br></pre></td></tr></table></figure>

<p><strong>查看键</strong></p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">keys *</span><br></pre></td></tr></table></figure>

<p><strong>键总数</strong></p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">dbsize</span><br></pre></td></tr></table></figure>

<p><strong>键是否存在</strong></p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">exists key1 key2 ... </span><br></pre></td></tr></table></figure>

<p><strong>随机返回一个键</strong></p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">randomkey</span><br></pre></td></tr></table></figure>

<p><strong>删除键</strong></p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">del keyname</span><br></pre></td></tr></table></figure>

<p><strong>修改键名</strong></p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">rename k n_k</span><br><span class="line">renamenx k n_k(n_k不存在时)</span><br></pre></td></tr></table></figure>

<p><strong>移动键到数据库n</strong></p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">move keyname n</span><br></pre></td></tr></table></figure>

<p><strong>查询键的生命周期(-1永久)</strong></p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">ttl kn</span><br></pre></td></tr></table></figure>

<p><strong>设置过期时间</strong></p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">秒语法：expire kn 10</span><br><span class="line">毫秒语法：pexpire kn 10000</span><br><span class="line">永久语法：persist kn</span><br></pre></td></tr></table></figure>

<p><strong>获取值类型</strong></p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="built_in">type</span> keyname</span><br></pre></td></tr></table></figure>

<hr>
<h3>string</h3>

<p><strong>设置[多]键值</strong></p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">[m]<span class="built_in">set</span> k v [EX seconds] [PX millisexonds] [NX|XX]</span><br><span class="line">setnx k v</span><br></pre></td></tr></table></figure>

<p><strong>获取[多]值</strong></p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">[m]get k</span><br></pre></td></tr></table></figure>

<p><strong>获取值部分字符</strong></p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">getrange k start end</span><br></pre></td></tr></table></figure>

<p><strong>值追加</strong></p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">append k string</span><br></pre></td></tr></table></figure>

<p>**值长度v</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">strlen k</span><br></pre></td></tr></table></figure>

<p><strong>值递增n[浮点型]</strong></p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">incrby[<span class="built_in">float</span>] k n</span><br></pre></td></tr></table></figure>

<p><strong>值递减n</strong></p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">decrby k n</span><br></pre></td></tr></table></figure>

<p><strong>删除键值</strong></p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">del k</span><br></pre></td></tr></table></figure>

<p><strong>序列化</strong></p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">dump k</span><br></pre></td></tr></table></figure>

<hr>
<h3>hash</h3>

<p><strong>设置键(h_k)值(kn vn)</strong></p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">hmset h_k k1 v1 k2 v2 ...</span><br><span class="line">hsetnx h_k k v 不存在k时放入</span><br></pre></td></tr></table></figure>

<p><strong>获取字段值</strong></p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">hgetall h_k</span><br><span class="line">hmget h_k k1 k2 ...</span><br><span class="line">hget h_k kx</span><br></pre></td></tr></table></figure>

<p><strong>字段k是否存在</strong></p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">hexists h_k k</span><br></pre></td></tr></table></figure>

<p><strong>查看字段数目</strong></p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">hlen h_k</span><br></pre></td></tr></table></figure>

<p><strong>查看所有字段</strong></p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">hkeys h_k</span><br></pre></td></tr></table></figure>

<p><strong>查看所有值</strong></p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">hvals h_k</span><br></pre></td></tr></table></figure>

<p><strong>值运算</strong></p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">hincrby h_k kx n(10/-1)</span><br></pre></td></tr></table></figure>

<p><strong>删除键值</strong></p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">hdel h_k kx</span><br><span class="line">del h_k</span><br></pre></td></tr></table></figure>

<hr>
<h3>list</h3>

<p><strong>创建键(l_k)值(vn(可重复))</strong></p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">r/lpush l_k v1 v2 v2 ...</span><br></pre></td></tr></table></figure>

<p><strong>位置n插入v（默认0）</strong></p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">l/rset l_k index(n) v</span><br></pre></td></tr></table></figure>

<p><strong>查看元素</strong></p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">遍历：lrange l_k start(0) stop(-1)</span><br><span class="line">索引：lindex l_k index(n)</span><br></pre></td></tr></table></figure>

<p><strong>元素数目</strong></p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">llen l_k</span><br></pre></td></tr></table></figure>

<p><strong>弹出元素</strong></p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">l/rpop l_k</span><br></pre></td></tr></table></figure>

<p><strong>删除n(+n向右，-n向左，0全部)个v元素</strong></p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">lrem l_k n v</span><br></pre></td></tr></table></figure>

<p><strong>保留范围内(m至n)的元素</strong></p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">ltrim l_k start(m) stop(n)</span><br></pre></td></tr></table></figure>

<hr>
<h3>set</h3>

<p><strong>创建键(s_k)值(vn)</strong></p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">sadd s_k v1 v2 ...</span><br></pre></td></tr></table></figure>

<p><strong>查看所有元素</strong></p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">smembers s_k</span><br></pre></td></tr></table></figure>

<p><strong>随机返回n个元素</strong></p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">srandmember s_k n</span><br></pre></td></tr></table></figure>

<p><strong>查看是否存在元素</strong></p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">sismember s_k v1 v2 ...</span><br></pre></td></tr></table></figure>

<p><strong>查看元素个数</strong></p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">scard s_k</span><br></pre></td></tr></table></figure>

<p><strong>差集运算</strong></p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">sidff s_km s_kn</span><br><span class="line">sidffstore s_kd s_km s_kn(结果放入s_kd)</span><br></pre></td></tr></table></figure>

<p><strong>交集运算</strong></p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">sinter s_km s_kn ...</span><br><span class="line">sinterstore s_kd s_km s_kn ...(结果放入s_kd)</span><br></pre></td></tr></table></figure>

<p><strong>并集运算</strong></p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">sunion s_km s_kn ...</span><br><span class="line">sunionstore s_kd s_km s_kn ...(结果放入s_kd)</span><br></pre></td></tr></table></figure>

<p><strong>删除元素</strong></p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">srem s_k v1 v2 ...</span><br></pre></td></tr></table></figure>

<p><strong>弹出n个元素</strong></p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">spop s_k n</span><br></pre></td></tr></table></figure>

<p><strong>移动元素</strong></p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">smove v s_k1 s_k2 </span><br></pre></td></tr></table></figure>

<p><strong>删除s_k</strong></p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">del s_k</span><br></pre></td></tr></table></figure>

<hr>
<h3>zset(按score_double排序)</h3>

<p><strong>创建键(zs_k)值(score_double(可重复) vn)</strong></p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">zadd zs_k 456 v1 478 v2 478 v3</span><br></pre></td></tr></table></figure>

<p><strong>遍历元素</strong></p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">zrange zs_k strat(0) stop(-1) [withscores]</span><br></pre></td></tr></table></figure>

<p><strong>返回min-max分段的第m位后n个元素</strong></p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">zrangebyscore zs_k min(0) max(-1) [withscore] <span class="built_in">limit</span> m n</span><br></pre></td></tr></table></figure>

<p><strong>元素个数</strong></p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">zcard zs_k</span><br></pre></td></tr></table></figure>

<p><strong>查看min-max的元素个数</strong></p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">zcount zs_k min(-inf) max(+inf)</span><br></pre></td></tr></table></figure>

<p><strong>查看kx的sd</strong></p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">zscore zs_k kx</span><br></pre></td></tr></table></figure>

<p><strong>改vx的sd+/-300</strong></p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">zincrby zs_k +/-300 vx</span><br></pre></td></tr></table></figure>

<p><strong>元素排名</strong></p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">zrank zs_k v</span><br></pre></td></tr></table></figure>

<p><strong>删除元素</strong></p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">指定：zrem zs_k km [kn ..]</span><br><span class="line">范围：zremrangebyscore zs_k min max</span><br></pre></td></tr></table></figure>

<hr>
<h3>python</h3>

<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> redis <span class="keyword">as</span> rd</span><br><span class="line"></span><br><span class="line">client = rd.Redis(host=<span class="string">&#x27;localhost&#x27;</span>, port = <span class="number">6379</span>, db = <span class="number">0</span>)</span><br><span class="line"></span><br><span class="line">print(client.keys())</span><br><span class="line">client.set(<span class="string">&#x27;book5&#x27;</span>,<span class="string">&#x27;redis&#x27;</span>)</span><br><span class="line">client.append(<span class="string">&#x27;book5&#x27;</span>, <span class="string">&#x27;-client&#x27;</span>)</span><br><span class="line">print(client.get(<span class="string">&#x27;book5&#x27;</span>).decode())</span><br><span class="line">client.lpush(<span class="string">&#x27;zb&#x27;</span>, <span class="number">18</span>, <span class="string">&#x27;cs&#x27;</span>, <span class="string">&#x27;play&#x27;</span>)</span><br><span class="line">print(client.lrange(<span class="string">&#x27;zb&#x27;</span>, <span class="number">0</span>, <span class="number">2</span>))</span><br><span class="line">client.sadd(<span class="string">&#x27;hello&#x27;</span>, <span class="string">&#x27;zb&#x27;</span>, <span class="string">&#x27;sx&#x27;</span>)</span><br><span class="line">print(client.smembers(<span class="string">&#x27;hello&#x27;</span>))</span><br><span class="line"></span><br><span class="line">all_info = client.keys</span><br><span class="line"><span class="keyword">for</span> key <span class="keyword">in</span> all_info():</span><br><span class="line">    print(key.decode())</span><br></pre></td></tr></table></figure>]]></content>
  </entry>
  <entry>
    <title>ubuntu</title>
    <url>/2020/09/08/ubuntu/</url>
    <content><![CDATA[<h3>apt命令</h3>

<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">sudo apt-get update <span class="comment"># 更新本地包数据库</span></span><br><span class="line">sudo apt-get upgrade <span class="comment"># 更新所有已安装的包</span></span><br><span class="line">sudo apt-get install &lt;packagename&gt; <span class="comment"># 安装</span></span><br><span class="line">sudo apt-get autoremove <span class="comment"># 自动移除不需要的包</span></span><br><span class="line">补充几个常用的清理命令：</span><br><span class="line">  apt-get autoclean: 将已删除软件包的.deb安装文件从硬盘中删除；</span><br><span class="line">  apt-get clean: 同上，但会把已安装的软件包的安装包也删除掉；</span><br><span class="line">  apt-get autoremove: 删除为了满足其他软件包的依赖而安装，但现在不再需要的软件包；</span><br><span class="line">  apt-get remove &lt;packagename&gt;: 删除已安装的软件包（保留配置文件）；</span><br><span class="line">  apt-get --purge remove [软件包名]: 删除已安装包（不保留配置文件）</span><br><span class="line">sudo  apt-cache  search  package_name <span class="comment"># 搜索软件</span></span><br><span class="line">sudo apt-cache show package_name <span class="comment"># 查看软件包信息</span></span><br><span class="line">sudo apt-cache show depends package_name <span class="comment"># 查看软件包依赖关系</span></span><br></pre></td></tr></table></figure>

<h3>安装 vsftpd</h3>

<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">sudo apt-get install vsftpd</span><br><span class="line">vi /etc/vsftpd.conf</span><br><span class="line">systemctl start vsftpd</span><br><span class="line">systemctl status vsftpd</span><br><span class="line">systemctl restart vsftpd</span><br></pre></td></tr></table></figure>

<h3>安装 Apache</h3>

<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">sudo apt update</span><br><span class="line">sudo apt install apache2</span><br><span class="line">sudo ufw allow <span class="string">&#x27;Apache Full&#x27;</span> <span class="comment">#防火墙中打开80,443端口</span></span><br><span class="line">sudo ufw status <span class="comment">#查看更改</span></span><br><span class="line">vi /etc/apache2/sites-eabled/000-default.cong <span class="comment">#配置文件</span></span><br><span class="line">sudo systemctl restart appache2</span><br><span class="line">sudo sustemctl status appache2</span><br><span class="line">管理apache服务</span><br><span class="line">sudo /etc/init.d/apache2 [ start | stop | restart | status ]</span><br><span class="line">或</span><br><span class="line">service apache2 [ start | stop | restart | status ]</span><br></pre></td></tr></table></figure>

<h3>数据库</h3>

<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">sudo apt update &amp;&amp; sudo apt upgrade -y <span class="comment">#更新包</span></span><br><span class="line">sudo apt install mongodb <span class="comment">#下载mongodb</span></span><br></pre></td></tr></table></figure>
<pre><code>失败E: 软件包 mongodb-server 没有可安装候选
  vim /etc/apt/sources.list
    deb [by-hash=force] https://mirrors.tuna.tsinghua.edu.cn/deepin panda main contrib non-free</code></pre>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">sudo apt install mongodb-server mongodb-client</span><br><span class="line">apt-get install mysql-server mysql-client（MySQL安装）</span><br><span class="line">apt-get install redis(安装Redis)</span><br><span class="line"></span><br><span class="line">systemctl start mongodb <span class="comment">#启动</span></span><br><span class="line">systemctl status mongodb <span class="comment">#查看</span></span><br><span class="line">systemctl restart mongodb <span class="comment">#重启</span></span><br></pre></td></tr></table></figure>

<p>  <strong>运行</strong></p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">   su</span><br><span class="line">   mongo</span><br><span class="line">   mysql</span><br><span class="line">redis-cli</span><br><span class="line">   出来mongo(mysql) shell</span><br></pre></td></tr></table></figure>

<p>  包管理器将创建/var/lib/mongodb 和 /var/log/mongodb**<br>  配置文件 /etc/mongod.conf</p>
<p>  <strong>卸载</strong></p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">sudo systemctl stop mongodb</span><br><span class="line">sudo apt purge mongodb</span><br><span class="line">sudo apt autoremove</span><br></pre></td></tr></table></figure>

<h3>防火墙</h3>

<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">iptables -F <span class="comment">#关闭</span></span><br><span class="line">sudo ufw <span class="built_in">enable</span>|<span class="built_in">disable</span> <span class="comment">#开启/关闭防火墙</span></span><br><span class="line">sudo ufw default deny <span class="comment">#开启了防火墙，并在系统启动时自动开启，关闭所有外部对本机的访问，但本机访问外部正常。</span></span><br><span class="line">sudo ufw allow/deny 20 <span class="comment">#开启/禁用20端口</span></span><br><span class="line">sudo ufw default allow/deny <span class="comment">#外来访问默认允许/拒绝</span></span><br><span class="line">sudo ufw delete allow 53 <span class="comment">#删除53端口的规则</span></span><br><span class="line">sudo ufw status <span class="comment">#查看</span></span><br></pre></td></tr></table></figure>]]></content>
  </entry>
  <entry>
    <title>编辑器之神——vim</title>
    <url>/2020/09/08/vim-do/</url>
    <content><![CDATA[<p>vi ：<br>    打开文件<br>        vi filename(s) [n] #打开(多个)文件[到第n行]</p>
<pre><code>编辑模式：
    ctrl k：确认输入模式
    ctrl s：锁定，记忆输入
    ctrl q：解锁，显示输出
    ctrl o: 暂退编辑模式
    ctrl g j/k: 相当于↓,↑
    ctrl j,m：相当于enter
    ctrl h：相当于backspace
    ctrl i: 相当于tab
    ctrl t: 向右缩进
    ctrl n,p：向下，上 选择粘贴一行
    ctrl y：对应粘贴上一行
    ctrl w/u: 向前删
    ctrl e: 撤销
    ctrl rn: 后退n步

    ctrl x：
    ctrl a：
    alt q：标记

命令模式：
    a: 从光标所在的下一个字符处开始插入
    A: 从光标所在行的最后一个字符处开始插入
    i: 从光标所在处插入
    I: 在所在行的第一个非空格符处开始插入
    o: 在光标所在的下一行插入新的一行
    O: 在光标所在的上一行插入新的一行
    r: 取代一个字符
    R: 一直取代，直到按下ESC为止
    s: 剪切当前字符开始插入
    S: 剪切当前行开始插入
    C: 剪切到行尾开始插入
    cc: 剪切当前行开始插入
    ctrl c: 剪切光标后开始插入
    ncj: 如向下删除n行开始插入
    cw：更改光标所在处的字
    cnw：更改n个字
    ZZ: 保存退出

    v: 字符选择
    V: 行选择
    Ctrl v: 块选择
    y: 将反白的地方复制起来
    d: 将反白的地方删除掉

    yw: 复制一个单词
    [n]yy: [n]行复制
    [n]x: 向后剪切一[n]个字符，(cut)
    [n]X: 向前剪切一[n]个字符
    p: 粘贴到光标下一行
    P: 粘贴在游标上一行
    dw: 删除一个单词(delets)
    D: 删到行尾
    [n]dd: 删[n]行
    dG: 删到文尾
    d[n]gg: 删到文首,删n行
    ctrl g：显示行数百分比
    ctrl r: 重做上一个动作(redo)
    u: 复原前一个动作(undo)
    ctrl z: 撤销
    .: 重复操作

    /, ?word：向光标之上，下查找word
    n: 重复正向查找操作
    N: 重复反向查找操作

    [n]h, ← 左移n
    [n]j, ↓, + 下移n
    [n]k, ↑, - 上移n
    [n]l, → 右移n
    [n] space: 右移n
    [n] enter: 下移n
    b: 上一个单词头
    w: 下一个单词头
    e: 下一个单词尾
    ff: 光标找到本行下一个f
    ^, 0, home 行首
    $, end 行尾
    H: 光标移到屏幕最上方那一行的第一个字符
    M: 光标移到屏幕中央那一行的第一个字符
    L: 光标移到屏幕最下方那一行的第一个字符
    ctrl u: 上移半页
    ctrl d: 下移半页
    ctrl f: 相当于PgUp
    ctrl b: 相当于PgDn
    ctrl p: 下一行
    ctrl n,m: 下一行
    [n]gg: 首行，第n行
    G: 末行
    ctrl t: 
    J: 将光标所在列不下一列的数据结合成同一列
    缩徘: &lt;&lt;,&gt;&gt;
    段数切换：&#123;/&#125;
    括号匹配及切换：%

末行模式：
    :q! #强制退出
    :[n1,n2]w [f_n] #[n1到n2行]保存[到f_n]
    :wq! , :x , ZZ #三者相同，保存退出
    :[v]ps 文件路径 #分屏; ctrl w j/k 换页
    :n [f_n] #编辑下一个档案, [新建f_n]
    :N #编辑上一个档案
    :files #列出目前这个vim开启的所有档案
    :set #显示用户改更改的设定参数
    :set [no]nu #[取消]设定行号
    :set all #显示目前所有的环境参数设定值
    :set nohlsearch #设定是否将搜寻的字符串凸显
    :set [no]autoindent #是否自动缩排？autoindent 就是自动缩排
    :syntax on/off #相关语法显示颜色
    :n1,n2s/o/n/g[c]  #n1到n2行[:1,$s 全局]的o变n；c确定提示
    :e . #执行命令
    :! command #暂时离开vi执行command</code></pre>
<p>6.换行符<br>    cat -A filename #查看<br>        DOS: ^M$ 有CR与LF两个符号<br>        Linux: $ 仅有 LF<br>    相互间转换<br>        dos2unix [-kn] file [newfile]<br>        unix2dos [-kn] file [newfile]<br>        -k ：保留该档案原本的mtime时间格式<br>        -n ：保留原本的旧档，将转换后的内容输出到新档案<br>7.编码<br>    iconv –list #查看支持的语系数据<br>    iconv -f 原编码 -t 新编码 filename [-o newfile] #转换<br>    -f ：from<br>    -t ：to<br>    -o file：如果要保留原本的档案</p>
]]></content>
  </entry>
  <entry>
    <title>cpp</title>
    <url>/2020/11/08/cpp/</url>
    <content><![CDATA[<p>头文件：可以使用.h(c的头文件)或cpp标准头文件(<cstdio>,<iostream>等)；cpp标准头文件都在std命名空间内<br>    <a href="http://m.biancheng.net/view/2193.html">http://m.biancheng.net/view/2193.html</a><br>命名空间：防止多人开发时命名冲突<br>    语法：namespace name{….};<br>    使用：1.每次前加作用域，例 name::变量，::域解析操作符<br>          2.为后面单个申明，using  name::变量;<br>          3.所有申明，using namespace std(name)[大型项目局部申明]; std 标准命名空间<br>内存的分区模型：不同区域存放的数据，拥有不同的生命周期，编程更灵活<br>    代码区：存函数体的二进制代码，操作系统管理；共享，只读<br>    全局区：存全局变量，全局常量和静态变量及字符串常量；        默认值 0，下面两区默认 垃圾值<br>    前两区是生成EXE后，执行EXE前就划分的区域<br>    栈区：存参数值，局部变量和局部常量等，编译器自动分配释放；不要返回局部变量的地址（编译器只会保留一次其值）<br>    堆区：程序员分配释放，若不，程序结束后操作系统回收<br>    int * p = new int(10)/arr[3];p 在栈区， new的存储单元地址（p指向的数据）在堆区，delete p/[]arr 释放<br>指针：存放地址。指针也是地址，指针变量俗称指针，两者不是一个概念<br>    语法格式：int * p = &i;<br>    大小：一个字长<br>    指针运算符：变量前 * 转址，指针变量申明<br>            指针前 * 转值，解引用<br>            &amp; 取地址<br>    空指针：int * p = NULL；<br>        用来初始化。NULL编号为0的存储单元，0-255系统占用，不可 访问<br>    野指针：int * p = （int *）0x17379729；<br>        不能访问，避免<br>数组：存放同类型数据<br>    语法格式：int arr[2] = {1,2};不能缺省’长度’,元素默认值为0<br>        指针数组：int * arr[n];<br>            arr[n] = b[m];  一次存放一维数组<br>        数组指针：int (*arr)[n];<br>            arr = b[m][n];  一次存放二维数组<br>    数组名：数组首地址；指针常量，不可赋值<br>    访问：<br>        索引：a[n]<br>        指针：int * p = arr；*p++，p[n]<br>const：申明常量，防止修改<br>    语法格式：<br>        修饰常量：int * const p = &i;  –&gt;指针常量<br>            指向不可改，指向值可改  (*p = 3; 引用的实质)<br>        修饰指针：const int * p = &i; –&gt;常量指针<br>            指向可改，指向值不可改  (a = &b;)<br>        修饰指针和常量：const int * const p = &i;<br>            指向与指向值均不可改</p>
<p>引用：起别名，作为形参<br>    语法格式：数据类型 &amp;别名 = 原名; 不能空引用，必须初始化<br>    实质：int &amp;a = i &lt;==&gt; int * const a = &amp;i；a = 10 &lt;==&gt; *a = 10; 指针常量<br>    函数作左值，必须返回引用；返回静态变量引用，不能返回局部变量引用<br>    常量引用：const int &amp;a = 10;//编译器修改为 int temp = 10; const int &amp;a = temp; </p>
<p>指针与引用作为参数传递不产生副本；可以改变实参，也可用const修饰形参，防止误操作。</p>
<p>函数：代码封装，模块化<br>    参数：<br>        默认参数：放后边；申明或实现只能一个有<br>        占位参数：void func(int [ = 10]); 作用是函数重载<br>    重载：提高复用性<br>        1.条件：同一作用域；2.函数名相同；3.参数 类型/个数/顺序 不同。返回值不是条件<br>        2.坑：有默认参数时 防止二义性<br>    内联：替换作用，提高执行效率，耗费内存，适用于简单小函数<br>        inline:起建议作用，是否内联编译器决定。申明时写无效，实现前添加；成员函数类外实现前写，类内自带</p>
<p>宏定义：替换作用；定义的函数无数据类型限定</p>
<p>自定义数据类型：<br>    结构体：<br>        语法：struct 结构体名 {成员表} 变量名 = ｛.,.,.,.｝；<br>            1.struct<br>                ｛<br>                    成员表；</p>
<pre><code>            ｝变量名 [= &#123;.,.,.,.&#125;]；
        2.struct 结构体名
            ｛
                成员表；

            ｝变量名 [= &#123;.,.,.,.&#125;]；
        结构体名 变量名；
        3.typedef struct 结构体名
            ｛
                成员表；

            ｝类型别名；
        类型别名 变量名；
    访问：
        变量名.成员变量
        变量名-&gt;成员变量</code></pre>
<p>面向对象编程：提升复用性<br>    封装：类<br>        语法：class 类名｛访问权限：属性/行为 ｝;<br>        访问权限：<br>            1.public    公共权限 成员 类内外都可访问<br>            2.protected 保护权限 成员 类内可访问 继承可访问<br>            3.private   私有权限 成员 类内可访问 友元可访问<br>        成员变量：也叫属性<br>            静态成员变量：所有对象共享；不属于类对象上，类名也可访问<br>                类内申明（static 数据类型 变量名），类外初始化（数据类型 类名::变量名）<br>        成员函数：也叫行为/方法；不属于类对象上<br>            类内创建，默认带inline；类内申明，类外实现(推荐)，语法与上类似<br>            this指针：隐含于非静态成员函数内的特殊对象指针常量，指向被调的成员函数所属的对象<br>                1.形参与成员变量同名时，可用this区分；<br>                2.引用型函数，返回对象本身：return *this; 用于链式编程<br>            非静态成员函数：同类型对象共用的一块代码，通过特殊对象指针this区分是哪个对象调用<br>            静态成员函数：所有对象共享；只能访问静态成员变量；不能使用this指针；语法与上类似<br>            常成员函数：不可修改成员属性(mutable 属性 则可改)。本质就是const修饰了this<br>                语法：类型 函数名()const {…}; ==&gt; const 类名 * const this<br>        构造函数：系统自动调用，类实例化时完成对象初始化<br>            语法：类名(..){…}; 有参数可重载<br>            初始化列表：类名(..):属性(形参变量)，属性(形参变量)，…{}; 常属性只能用初始化列表<br>            调用：1.()法 C c(10)；2.显示法 C c=C(10)；3.隐式转换法 C c=10；C(10) 匿名对象 会内存泄漏<br>            坑：调用无参构造函数时不要加(),编译器会误以为是函数申明<br>        拷贝构造函数：拷贝对象<br>            语法：类名(c1){….}；<br>            浅拷贝：问题是属性有堆区内存时会被重复释放<br>            深拷贝：用于有堆区数据的对象拷贝；语法：类名(const 类名 &amp;p){a = p.a; b = new int(*p.b};<br>        析构函数：系统自动调用，对象销毁前完成对象清理工作；用于释放堆区开辟的数据，关闭文件等<br>            语法： ~类名(){…}; 没参数不可重载<br>        若不手动创建，编译器会提供4个函数，构造函数与析构函数的空实现及值拷贝的拷贝构造函数和=重载函数<br>        拓展：<br>            def <strong>init</strong>(self, m,…):<br>                self.m = m<br>                ….<br>            def <strong>del</strong>(self):<br>                ….<br>            obj = className(args)<br>            del obj<br>            self是类的实例，也是类方法与普通函数的区别<br>            cpp隐藏了类似self的this指针；<br>        对象：类的实例化；<br>            空对象占用1B，普通对象占用只是非静态成员变量的大小和,成员变量(非静态)与成员函数分开存储；<br>            空指针对象可访问其不带属性的行为，所以要判断，防止权限问题（鲁棒性考虑）<br>            常对象:实例化前加const修饰，只能调用常函数，不可修改其属性(mutable 属性 则可改)<br>        参数：调用成员函数的对象就是一个参数；对象作参数一般引用传递<br>        友元：可以访问私有权限<br>            类作友元：类1 在类2中申明前加friend，类1的对象可以访问类2私有成员<br>            成员函数作友元：类1的成员函数 在类2中申明前加friend，该成员函数可访类2私有属性<br>            全局函数作友元：全局函数 在类中申明前加friend，该函数可访问该类私有属性<br>        运算符重载：自定义数据类型运算；修改参数可以发生函数重载<br>            语法：类名 operator+(参数表){….}; +重载；()重载 也叫仿函数<br>            本质：P p3 = p1 + p2; 成员函数 p1.operator+(p2); 全局函数 operator+(p1, p2);<br>            注：内置数据类型不能改；不要滥用重载<br>            例：ostream &amp;operator&lt;&lt;(ostream &amp;cout,类名 &amp;p){cout &lt;&lt;”a=”&lt;&lt;p.a;return cout;};成员函数没法<br>    继承：派生类重复利用基类代码；既具有共性，又具有个性<br>        语法：class 子类名:继承方式 父类1[,继承方式 父类2,….]{….};<br>        继承方式：<br>            1.公有继承：基类私有成员不可访问，公有与保护权限不改变<br>            2.保护继承：基类私有成员不可访问，公有与保护权限变保护<br>            3.私有继承：基类私有成员不可访问，公有与保护权限变私有<br>        虚继承：解决菱形继承多份数据的问题<br>            语法：class 派生类:virtual 继承方式 虚基类{….};<br>            本质：派生类继承的是虚基类指针，虚基类指针通过虚基类列表中偏移量指向唯一数据<br>        同名成员访问：1.对象访问 2.类访问(静态)；对象成员符 . 类成员符 :: (作用域 类名::)<br>        子类对象：继承父类中所有非静态成员属性，占用空间为所有非静态成员变量与虚指针的大小和<br>        拓展：利用开发人员命令行查看对象模型 文件路径下&gt;cl /d1 reportSingleClassLayout类名 文件名<br>    多态：代码组织结构清晰，可读性强，利于前期和后期的扩展以及维护<br>        静态多态：函数重载和运算符重载,复用函数名；编译阶段确定函数地址，早绑定<br>        动态多态：派生类和虚函数实现运行时多态；运行阶段确定函数地址，晚绑定<br>            子类重写父类虚函数；父类指针或引用接收子类对象<br>        虚函数：virtual 类型 函数名(…){…};<br>            本质：创建虚函数指针，通过存放虚函数地址的虚函数表中指向唯一虚函数地址<br>        纯虚函数：virtual 类型 函数名(…) = 0;<br>            意义：通常虚函数的实现没有意义<br>        [纯]虚析构:若子类有属性在堆区，解决父类指针在释放时无法调用到子类的析构代码问题<br>            都需要有具体函数实现，纯虚析构在类外实现<br>        抽象类：有纯虚函数的类，无法实例化对象<br>            注：无法实例化对象；子类必须重写抽象类的纯虚函数，否则也就成了抽象类<br>        开发原则：对扩展进行开放，对修改进行关闭，多态的重要性<br>struct 默认权限public，class 默认权限private；两者都是自定义数据类型<br>    参与设计全世界第一套C++ 编译器cfront的Lippman在《深度探索C++内存模型》中指出：<br>一个常被程序员询问的问题是：什么时候一个人应该在C++程序中以struct替代class？如果是<br>1986年，我的答案豪不拖泥带水：“绝不！”……那么，让我重新问一次：“什么时候一个人<br>应该使用struct取代class”答案之一是：当它让一个人感觉比较好的时候。<br>你甚至可以主张说它的用途只是为了方便C程序员迁徙至C++ 部落。因为C++的class真的只是个<br>struct，只不过C++编译器会在编译期对它做一些“魔改”动作而已。早年，诸如游戏业的精灵<br>抽象、unix系的“一切皆文件”等设计思想，都是用C乃至汇编表现出来的。正是这些思想启发<br>并引导了后来的面向对象热潮。对C来说，struct可以放任何它支持的数据类型。包括函数指针<br>——后来C++所谓的虚函数表，很多编译器的实现，就是一个指向另一个全局结构体的指针，这<br>个全局结构体里面是一条一条的函数指针，指向对应类重载后的所谓“虚函数”。至于各种所<br>谓的成员函数，实际上就是些第一个参数是classXX类型的this指针的普通函数。换言之，<br>struct本身已经足以支持面向对象编程运行期需要的一切了；现在，我们只需要增加一些新的<br>语法约定，使得编译器可以帮助用户自动维护这些琐碎细节就行了——这正是 Bjarne<br>Stroustrup当年搞Cfront的设计思路：先把C++代码自动魔改到C，然后调用C编译器完成编译。<br>后期虽然有了直接支持c++的编译器（因为在cfront中加入异常支持失败），但编译器关于<br>struct的处理并没有本质的不同。于是，所谓class，其实就是加了某些外部支持的struct<br>——除了编译期可能会被编译器魔改的面目全非外，它和普通struct毫无差别。这个支持一<br>般来说应该是这样的（但并不禁止编译器厂商选择其他方案）：<br>    1、对普通成员函数，为它自动添加this参数，并在调用它时，自动把 obj.method() 转<br>换成method(obj)格式；并识别出函数中涉及的、没有显式使用this的成员变量、为它加上<br>this。除此之外，别的什么都不用做。<br>    2、对虚函数，需要为继承链上的每个类产生一个全局结构体，在这个结构体里按次序安<br>排指向该类所有虚函数的指针，这就是虚函数表；然后在类里添加一个指向属于自己的虚函数<br>表的指针。那么，当用户调用某个对象的第N个虚函数时，到虚函数表查找并获取第N个函数指<br>针指向的内容；然后类似调用普通成员函数一样，把 obj.method() 转换成 method(obj)格<br>式，多态就实现了。<br>    当然，除此之外，还要在编译时执行权限检查，避免非法访问类的protect/private成员<br>（struct默认权限是public，class是private）；以及另外一些琐碎工作。所以你看，c++的类<br>归根结底，它就是个C语言的struct。只是（相当于）在编译期做了些预处理而已——只要你在<br>里面声明了成员函数，就会自动触发预处理，从而实现“自动魔改你所定义的数据结构，使其支<br>持OO诸要素”功能。<br>那么，除了让C代码共用C++里面定义的struct这个特殊场景外（想了解这类能兼容C的数据类型，<br>可搜索 POD类型），你说还有什么理由禁止struct拥有成员函数呢？</p>
<p>文件操作：<fstream><br>    w：ofstream obj; obj.open(“path”,打开方式); obj &lt;&lt; “写入数据”; obj.close();<br>    r：ifstream obj; obj.open(“path”,打开方式); obj &gt;&gt; 接收变量; obj.close();<br>    rw：fstream obj; obj.open(“path”,打开方式); ….<br>    打开方式：1.ios::in；2.ios::out；3.ios::app。例：二进制写 ios::binary | ios::out</p>
<p>泛型编程：静态语言的动态化<br>    模板：通用模具，提高复用性；不可直接使用，只是框架<br>        函数模板：通用函数，其返回值类型与形参类型用虚拟的类型(T)代表<br>            语法：template &lt;typename T1, …&gt;；函数；T1通用类型<br>            调用：1.自动推倒类型(一致) 函数名(变量名，..); 2.显示指定类型 函数名&lt;类型&gt;(变量名，..);<br>            注：自动推到类型，不能隐式类型转换；显示指定类型与普通函数调用时可以隐式类型转换<br>            拓展：c是 静态、弱类型语言，自动推倒类型似 动态、强类型语言<br>        类模板：通用类，其成员类型为虚拟的类型(T1，T2，…)<br>            语法：template &lt;class T1[= int]，…&gt;；类；T1通用类型[可以默认]<br>            调用：类模板&lt;类型表&gt; 对象名(参数表)；只能是显示指定类型，后面容器会用<br>            注：子类继承类模板时要确定类型；成员函数类外实现时加上模板参数列表<br>            ps:分文件编写时，类模板写在.hpp文件中<br>STL：标准模板库；为了重复利用，建立了数据结构与算法的一套标准；<br>    六大组件：容器，算法，迭代器，仿函数，适配器(配接器)，空间配置器<br>    关系：容器与算法之间通过迭代器进行连接<br>    1.容器：vector、list、deque、set、map等；各自头文件<br>        序列式容器(强调值的排序，元素有固定位置)<br>        关联式容器(二叉树结构，元素间没有严格物理顺序)<br>        例：vector <int> v; v.push_back(10);<br>    2.算法：sort、random_shuffle、find、copy、for_each等；标准头文件<algorithm><br>        质变算法(拷贝、替换等，更改区间内元素的内容)<br>        非质变算法(查找、遍历等，不更改区间内元素的内容)<br>        例：sort(v.begin(), v.end(), greater<int>()); greater<int>()谓词<br>    3.迭代器：容器与算法之间的胶合剂，每个容器都有专属迭代器<br>        输入迭代器：只读，支持++、==、!=<br>        输出迭代器：只写，支持++<br>        向前迭代器：读写并向前推进，支持++、==、!=<br>        双向迭代器：读写并前后操作，支持++、–<br>        随机访问迭代器：读写可跳跃的随机访问，支持++、–、[n]、-n、&lt;、&gt;、&lt;=、&gt;=<br>        例：for(vector<int>::iterator it = v.begin; it != v.end(); it++) cout &lt;&lt; *it &lt;&lt; endl;<br>    4.仿函数：可作为算法的莫种策略；内建函数对象头文件<functional><br>        函数对象：函数调用操作符重载的类的对象；是一个类，不是函数；其使用重载()时行为类似函数，也叫仿函数<br>        谓词：返回值类型为bool型的仿函数；n元谓词：返回值n个<br>    5.适配器：修饰容器或仿函数或迭代器接口的东西<br>    6.空间配置器：负责空间的配置与管理</p>
<p>#include <ctime><br>//随机数种子<br>srand((unsigned int)time(NULL));<br>int random = rand()%41 + 60; //60-100</p>
]]></content>
  </entry>
</search>
